<?php

namespace App\Controller;

use App\Entity\User;
use Doctrine\ORM\EntityManagerInterface;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\BooleanField;
use EasyCorp\Bundle\EasyAdminBundle\Field\DateField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;


class UserCrudController extends AbstractCrudController
{

    /**
     * @var UserPasswordEncoderInterface
     */
    private $passwordEncoder;

    public function __construct(UserPasswordEncoderInterface $passwordEncoder)
    {
        $this->passwordEncoder = $passwordEncoder;
    }

    public static function getEntityFqcn(): string
    {
        return User::class;
    }


    public function configureFields(string $pageName): iterable
    {
        return [

            TextField::new('username', 'Email'),
            BooleanField::new('enabled', 'Actif'),
            TextField::new('plainPassword','Mot de passe')->onlyOnForms(),
            DateField::new('dateCreated','Date de la crÃ©ation')->hideOnForm(),
            //TextareaField::new('roles','Roles')
        ];
    }
   public function persistEntity(EntityManagerInterface $entityManager, $entityInstance): void
   {
       $this->updatePassword($entityInstance);
       parent::persistEntity($entityManager, $entityInstance); // TODO: Change the autogenerated stub
   }

   public function updateEntity(EntityManagerInterface $entityManager, $entityInstance): void
   {
       $this->updatePassword($entityInstance);
       parent::updateEntity($entityManager, $entityInstance); // TODO: Change the autogenerated stub
   }

    public function updatePassword(User $user)
    {
        if (!empty($user->getPlainPassword())) {
            $user->setPassword($this->passwordEncoder->encodePassword($user, $user->getPlainPassword()));
        }
    }



}
